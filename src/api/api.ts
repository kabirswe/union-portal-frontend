/*
 * Generated by orval v5.4.14 üç∫
 * Do not edit manually.
 * AIBS Cosmos2 WebAPI
 * AIBS ÂæìÊ•≠Âì°„Éù„Éº„Çø„É´„Çµ„Ç§„Éà„ÅÆ„Åü„ÇÅ„ÅÆWebAPI„Åß„Åô„ÄÇ
Web„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Åã„ÇâÂëº„Å≥Âá∫„Åó„Åæ„Åô„ÄÇ

ÂèÇËÄÉÊñáÁåÆÔºö
https://www.insight-tec.com/tech-blog/20210409_crud/

 * OpenAPI spec version: 1.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions
} from 'react-query'
import type {
  EmployeeResponse,
  ErrorCommonResponse,
  BulletinBoardsListResponse,
  PublicGetBulletinBoardsParams,
  GetBulletinBoardsParams,
  BulletinBoardsDetailResponse,
  TemplatesResponse,
  GetTemplatesParams,
  CommunicationToolsListResponse,
  GetCommunicationToolsParams,
  MenuListResponse,
  GetBusinessmenuMymenuLinksParams,
  PutBusinessmenuMymenuLinksBody,
  GetBusinessmenuLinksParams,
  MenuListCategoryResponse,
  GetBusinessmenuCategoriesParams,
  MyWidgetsListResponse,
  GetWidgetMyWidgetsParams,
  PutWidgetMyWidgetsBody,
  GetWidgetWidgetsParams,
  GlobalMenuLinksResponse,
  GetGlobalmenuLinksParams
} from './model'

type AsyncReturnType<
T extends (...args: any) => Promise<any>,
U = unknown
> = T extends (...args: any) => Promise<infer R> ? (U extends R ? U : R) : any;


export const getEmployeesEmployeeCode = <TData = AxiosResponse<EmployeeResponse>>(
    employeecode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/employees/${employeecode}`,options
    );
  }


export const getGetEmployeesEmployeeCodeQueryKey = (employeecode: string,) => [`/employees/${employeecode}`]

    
export const useGetEmployeesEmployeeCode = <TQueryFnData = AsyncReturnType<typeof getEmployeesEmployeeCode, AxiosResponse<EmployeeResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 employeecode: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetEmployeesEmployeeCodeQueryKey(employeecode);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getEmployeesEmployeeCode<TQueryFnData>(employeecode, axiosOptions), {enabled: !!(employeecode), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const publicGetBulletinBoards = <TData = AxiosResponse<BulletinBoardsListResponse>>(
    params?: PublicGetBulletinBoardsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/public/bulletin-boards`,
      {
        params,
    ...options },
    );
  }


export const getPublicGetBulletinBoardsQueryKey = (params?: PublicGetBulletinBoardsParams,) => [`/public/bulletin-boards`, ...(params ? [params]: [])]

    
export const usePublicGetBulletinBoards = <TQueryFnData = AsyncReturnType<typeof publicGetBulletinBoards, AxiosResponse<BulletinBoardsListResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: PublicGetBulletinBoardsParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getPublicGetBulletinBoardsQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => publicGetBulletinBoards<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getBulletinBoards = <TData = AxiosResponse<BulletinBoardsListResponse>>(
    params?: GetBulletinBoardsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/bulletin-boards`,
      {
        params,
    ...options },
    );
  }


export const getGetBulletinBoardsQueryKey = (params?: GetBulletinBoardsParams,) => [`/bulletin-boards`, ...(params ? [params]: [])]

    
export const useGetBulletinBoards = <TQueryFnData = AsyncReturnType<typeof getBulletinBoards, AxiosResponse<BulletinBoardsListResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetBulletinBoardsParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetBulletinBoardsQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getBulletinBoards<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const postBulletinBoards = <TData = AxiosResponse<unknown>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/bulletin-boards`,
      undefined,options
    );
  }



    export const usePostBulletinBoards = <TData = AsyncReturnType<typeof postBulletinBoards,AxiosResponse<unknown>>,
    TError = ErrorCommonResponse,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,TVariables, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<TData, TError, TVariables, TContext>(() => {
        ;

        return  postBulletinBoards<TData>(axiosOptions)
      }, mutationOptions)
    }
    export const getBulletinBoardsArticleId = <TData = AxiosResponse<BulletinBoardsDetailResponse>>(
    ArticleId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/bulletin-boards/${ArticleId}`,options
    );
  }


export const getGetBulletinBoardsArticleIdQueryKey = (ArticleId: string,) => [`/bulletin-boards/${ArticleId}`]

    
export const useGetBulletinBoardsArticleId = <TQueryFnData = AsyncReturnType<typeof getBulletinBoardsArticleId, AxiosResponse<BulletinBoardsDetailResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 ArticleId: string, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetBulletinBoardsArticleIdQueryKey(ArticleId);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getBulletinBoardsArticleId<TQueryFnData>(ArticleId, axiosOptions), {enabled: !!(ArticleId), ...queryOptions} )

  return {
    queryKey,
    ...query
  }
}

export const putBulletinBoardsArticleId = <TData = AxiosResponse<unknown>>(
    ArticleId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/bulletin-boards/${ArticleId}`,
      undefined,options
    );
  }



    export const usePutBulletinBoardsArticleId = <TData = AsyncReturnType<typeof putBulletinBoardsArticleId,AxiosResponse<unknown>>,
    TError = ErrorCommonResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{ArticleId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<TData, TError, {ArticleId: string}, TContext>((props) => {
        const {ArticleId} = props || {};

        return  putBulletinBoardsArticleId<TData>(ArticleId,axiosOptions)
      }, mutationOptions)
    }
    export const deleteBulletinBoardsArticleId = <TData = AxiosResponse<unknown>>(
    ArticleId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/bulletin-boards/${ArticleId}`,options
    );
  }



    export const useDeleteBulletinBoardsArticleId = <TData = AsyncReturnType<typeof deleteBulletinBoardsArticleId,AxiosResponse<unknown>>,
    TError = ErrorCommonResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{ArticleId: string}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<TData, TError, {ArticleId: string}, TContext>((props) => {
        const {ArticleId} = props || {};

        return  deleteBulletinBoardsArticleId<TData>(ArticleId,axiosOptions)
      }, mutationOptions)
    }
    export const getTemplates = <TData = AxiosResponse<TemplatesResponse>>(
    params?: GetTemplatesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/templates`,
      {
        params,
    ...options },
    );
  }


export const getGetTemplatesQueryKey = (params?: GetTemplatesParams,) => [`/templates`, ...(params ? [params]: [])]

    
export const useGetTemplates = <TQueryFnData = AsyncReturnType<typeof getTemplates, AxiosResponse<TemplatesResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetTemplatesParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetTemplatesQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getTemplates<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getCommunicationTools = <TData = AxiosResponse<CommunicationToolsListResponse>>(
    params?: GetCommunicationToolsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/communication-tools`,
      {
        params,
    ...options },
    );
  }


export const getGetCommunicationToolsQueryKey = (params?: GetCommunicationToolsParams,) => [`/communication-tools`, ...(params ? [params]: [])]

    
export const useGetCommunicationTools = <TQueryFnData = AsyncReturnType<typeof getCommunicationTools, AxiosResponse<CommunicationToolsListResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetCommunicationToolsParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetCommunicationToolsQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getCommunicationTools<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getBusinessmenuMymenuLinks = <TData = AxiosResponse<MenuListResponse>>(
    params?: GetBusinessmenuMymenuLinksParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/businessmenu/mymenu-links`,
      {
        params,
    ...options },
    );
  }


export const getGetBusinessmenuMymenuLinksQueryKey = (params?: GetBusinessmenuMymenuLinksParams,) => [`/businessmenu/mymenu-links`, ...(params ? [params]: [])]

    
export const useGetBusinessmenuMymenuLinks = <TQueryFnData = AsyncReturnType<typeof getBusinessmenuMymenuLinks, AxiosResponse<MenuListResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetBusinessmenuMymenuLinksParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetBusinessmenuMymenuLinksQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getBusinessmenuMymenuLinks<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const putBusinessmenuMymenuLinks = <TData = AxiosResponse<unknown>>(
    putBusinessmenuMymenuLinksBody: PutBusinessmenuMymenuLinksBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/businessmenu/mymenu-links`,
      putBusinessmenuMymenuLinksBody,options
    );
  }



    export const usePutBusinessmenuMymenuLinks = <TData = AsyncReturnType<typeof putBusinessmenuMymenuLinks,AxiosResponse<unknown>>,
    TError = ErrorCommonResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutBusinessmenuMymenuLinksBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<TData, TError, {data: PutBusinessmenuMymenuLinksBody}, TContext>((props) => {
        const {data} = props || {};

        return  putBusinessmenuMymenuLinks<TData>(data,axiosOptions)
      }, mutationOptions)
    }
    export const getBusinessmenuLinks = <TData = AxiosResponse<MenuListResponse>>(
    params?: GetBusinessmenuLinksParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/businessmenu/links`,
      {
        params,
    ...options },
    );
  }


export const getGetBusinessmenuLinksQueryKey = (params?: GetBusinessmenuLinksParams,) => [`/businessmenu/links`, ...(params ? [params]: [])]

    
export const useGetBusinessmenuLinks = <TQueryFnData = AsyncReturnType<typeof getBusinessmenuLinks, AxiosResponse<MenuListResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetBusinessmenuLinksParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetBusinessmenuLinksQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getBusinessmenuLinks<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getBusinessmenuCategories = <TData = AxiosResponse<MenuListCategoryResponse>>(
    params?: GetBusinessmenuCategoriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/businessmenu/categories`,
      {
        params,
    ...options },
    );
  }


export const getGetBusinessmenuCategoriesQueryKey = (params?: GetBusinessmenuCategoriesParams,) => [`/businessmenu/categories`, ...(params ? [params]: [])]

    
export const useGetBusinessmenuCategories = <TQueryFnData = AsyncReturnType<typeof getBusinessmenuCategories, AxiosResponse<MenuListCategoryResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetBusinessmenuCategoriesParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetBusinessmenuCategoriesQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getBusinessmenuCategories<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getWidgetMyWidgets = <TData = AxiosResponse<MyWidgetsListResponse>>(
    params?: GetWidgetMyWidgetsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/widget/my-widgets`,
      {
        params,
    ...options },
    );
  }


export const getGetWidgetMyWidgetsQueryKey = (params?: GetWidgetMyWidgetsParams,) => [`/widget/my-widgets`, ...(params ? [params]: [])]

    
export const useGetWidgetMyWidgets = <TQueryFnData = AsyncReturnType<typeof getWidgetMyWidgets, AxiosResponse<MyWidgetsListResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetWidgetMyWidgetsParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetWidgetMyWidgetsQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getWidgetMyWidgets<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const putWidgetMyWidgets = <TData = AxiosResponse<unknown>>(
    putWidgetMyWidgetsBody: PutWidgetMyWidgetsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/widget/my-widgets`,
      putWidgetMyWidgetsBody,options
    );
  }



    export const usePutWidgetMyWidgets = <TData = AsyncReturnType<typeof putWidgetMyWidgets,AxiosResponse<unknown>>,
    TError = ErrorCommonResponse,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutWidgetMyWidgetsBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      return useMutation<TData, TError, {data: PutWidgetMyWidgetsBody}, TContext>((props) => {
        const {data} = props || {};

        return  putWidgetMyWidgets<TData>(data,axiosOptions)
      }, mutationOptions)
    }
    export const getWidgetWidgets = <TData = AxiosResponse<MyWidgetsListResponse>>(
    params?: GetWidgetWidgetsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/widget/widgets`,
      {
        params,
    ...options },
    );
  }


export const getGetWidgetWidgetsQueryKey = (params?: GetWidgetWidgetsParams,) => [`/widget/widgets`, ...(params ? [params]: [])]

    
export const useGetWidgetWidgets = <TQueryFnData = AsyncReturnType<typeof getWidgetWidgets, AxiosResponse<MyWidgetsListResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetWidgetWidgetsParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetWidgetWidgetsQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getWidgetWidgets<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

export const getGlobalmenuLinks = <TData = AxiosResponse<GlobalMenuLinksResponse>>(
    params?: GetGlobalmenuLinksParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/globalmenu-links`,
      {
        params,
    ...options },
    );
  }


export const getGetGlobalmenuLinksQueryKey = (params?: GetGlobalmenuLinksParams,) => [`/globalmenu-links`, ...(params ? [params]: [])]

    
export const useGetGlobalmenuLinks = <TQueryFnData = AsyncReturnType<typeof getGlobalmenuLinks, AxiosResponse<GlobalMenuLinksResponse>>, TError = ErrorCommonResponse, TData = TQueryFnData>(
 params?: GetGlobalmenuLinksParams, options?: { query?:UseQueryOptions<TQueryFnData, TError, TData>, axios?: AxiosRequestConfig}

  ) => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetGlobalmenuLinksQueryKey(params);

  const query = useQuery<TQueryFnData, TError, TData>(queryKey, () => getGlobalmenuLinks<TQueryFnData>(params, axiosOptions), queryOptions )

  return {
    queryKey,
    ...query
  }
}

