/*
 * Generated by orval v5.4.14 🍺
 * Do not edit manually.
 * AIBS Cosmos2 WebAPI
 * AIBS 従業員ポータルサイトのためのWebAPIです。
Webフロントエンドから呼び出します。

参考文献：
https://www.insight-tec.com/tech-blog/20210409_crud/

 * OpenAPI spec version: 1.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'
import { getGetEmployeesEmployeeCodeMock } from 'api/mocks/responses/getGetEmployeesEmployeeCodeMock';
import { getPublicGetBulletinBoardsMock } from 'api/mocks/responses/getPublicGetBulletinBoardsMock';
import { getGetBulletinBoardsMock } from 'api/mocks/responses/getGetBulletinBoardsMock';
import { getGetTemplatesMock } from 'api/mocks/responses/getGetTemplatesMock';
import { getGetCommunicationToolsMock } from 'api/mocks/responses/getGetCommunicationToolsMock';
import { getGetBusinessmenuMymenuLinksMock } from 'api/mocks/responses/getGetBusinessmenuMymenuLinksMock';
import { getGetBusinessmenuLinksMock } from 'api/mocks/responses/getGetBusinessmenuLinksMock';
import { getGetBusinessmenuCategoriesMock } from 'api/mocks/responses/getGetBusinessmenuCategoriesMock';
import { getGetWidgetMyWidgetsMock } from 'api/mocks/responses/getGetWidgetMyWidgetsMock';
import { getGetWidgetWidgetsMock } from 'api/mocks/responses/getGetWidgetWidgetsMock';
import { getGetGlobalmenuLinksMock } from 'api/mocks/responses/getGetGlobalmenuLinksMock';

// export const getGetEmployeesEmployeeCodeMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {}, Bodies: {SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},}}})

// export const getPublicGetBulletinBoardsMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {TotalCount: faker.datatype.number(), Offset: faker.datatype.number(), Limit: faker.datatype.number()}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({BulletinBoardId: faker.datatype.number(), Title: faker.random.word(), SubmissionDatetime: faker.random.word(), LeadText: faker.random.word(), Contributor: faker.random.word(), EmployeeCode: faker.random.word(), ImportanceLevel: faker.datatype.number(), BulletinCategoryCode: faker.random.word(), BulletinCategoryName: faker.random.word(), NumberOfAccesses: faker.datatype.number()}))}})

// export const getGetBulletinBoardsMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {TotalCount: faker.datatype.number(), Offset: faker.datatype.number(), Limit: faker.datatype.number()}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({BulletinBoardId: faker.datatype.number(), Title: faker.random.word(), SubmissionDatetime: faker.random.word(), LeadText: faker.random.word(), Contributor: faker.random.word(), EmployeeCode: faker.random.word(), ImportanceLevel: faker.datatype.number(), BulletinCategoryCode: faker.random.word(), BulletinCategoryName: faker.random.word(), NumberOfAccesses: faker.datatype.number()}))}})

// TODO: API IF定義後に対応
export const getGetBulletinBoardsArticleIdMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({})), Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({BulletinBoardId: faker.datatype.number(), Title: faker.random.word(), SubmissionDatetime: faker.random.word(), LeadText: faker.random.word(), Contributor: faker.random.word(), EmployeeCode: faker.random.word(), ImportanceLevel: faker.datatype.number(), BulletinCategoryCode: faker.random.word(), BulletinCategoryName: faker.random.word(), NumberOfAccesses: faker.datatype.number()}))}})

// export const getGetTemplatesMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {TotalCount: faker.datatype.number(), Offset: faker.datatype.number(), Limit: faker.datatype.number()}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({TemplateId: faker.datatype.number(), TemplateName: faker.random.word(), TemplateExplanatoryNote: faker.helpers.randomize([faker.random.word(), undefined])}))}})

// export const getGetCommunicationToolsMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {TotalCount: faker.datatype.number(), Offset: faker.datatype.number(), Limit: faker.datatype.number()}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({LinkCode: faker.random.word(), LinkCategoryCode: faker.random.word(), LinkName: faker.random.word(), LinkUrl: faker.random.word(),IconUrl: faker.random.word()}))}})

// export const getGetBusinessmenuMymenuLinksMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({LinkCode: faker.random.word(), LinkCategoryCode: faker.random.word(), LinkName: faker.random.word(), LinkUrl: faker.random.word(),MandatoryFlg: faker.datatype.boolean(), CommonLinkFlg: faker.datatype.boolean()}))}})

// export const getGetBusinessmenuLinksMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({LinkCode: faker.random.word(), LinkCategoryCode: faker.random.word(), LinkName: faker.random.word(), LinkUrl: faker.random.word(),MandatoryFlg: faker.datatype.boolean(), CommonLinkFlg: faker.datatype.boolean()}))}})

// export const getGetBusinessmenuCategoriesMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({LinkCategoryCode: faker.random.word(), LinkCategoryName: faker.random.word()}))}})

// export const getGetWidgetMyWidgetsMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({WidgetId: faker.datatype.number(), WidgetName: faker.random.word()}))}})

// export const getGetWidgetWidgetsMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({WidgetId: faker.datatype.number(), WidgetName: faker.random.word()}))}})

// export const getGetGlobalmenuLinksMock = () => ({SrcSystem: {SystemId: faker.random.word(), TranToken: faker.random.word(), TranDateTime: faker.random.word()}, ApiVersion: {ApiName: faker.random.word(), Version: faker.random.word()}, DestSystem: {SystemId: faker.random.word(), ReceptToken: faker.random.word(), ReceptDatetime: faker.random.word(), Result: {Code: faker.random.word(), Message: faker.helpers.randomize([faker.random.word(), undefined])}},BusinessData: {MetaInfos: {}, Bodies: [...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({LinkType: faker.datatype.number(), WidgetId: faker.datatype.number(), LinkUrl: faker.random.word(), IconUrl: faker.random.word()}))}})

export const getAIBSCosmos2WebAPIMSW = () => [
rest.get('*/employees/:employeecode', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetEmployeesEmployeeCodeMock()),
        )
      }),
rest.get('*/public/bulletin-boards', (req, res, ctx) => {
  return res(
    ctx.delay(250),
    ctx.status(200, 'Mocked status'),
    ctx.json(getPublicGetBulletinBoardsMock()),
  )
}),
rest.get('*/bulletin-boards', (req, res, ctx) => {
  const groupCode = req.url.searchParams.get('group-code')

  return res(
    ctx.delay(250),
    ctx.status(200, 'Mocked status'),
    ctx.json(getGetBulletinBoardsMock(groupCode)),
  )
}),rest.post('*/bulletin-boards', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/bulletin-boards/:ArticleId', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetBulletinBoardsArticleIdMock()),
        )
      }),rest.put('*/bulletin-boards/:ArticleId', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.delete('*/bulletin-boards/:ArticleId', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/templates', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetTemplatesMock()),
        )
      }),rest.get('*/communication-tools', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetCommunicationToolsMock()),
        )
      }),
rest.get('*/businessmenu/mymenu-links', (req, res, ctx) => {
  const templateId = req.url.searchParams.get('template-id')

  return res(
    ctx.delay(250),
    ctx.status(200, 'Mocked status'),
    ctx.json(getGetBusinessmenuMymenuLinksMock(templateId)),
  )
}),rest.put('*/businessmenu/mymenu-links', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/businessmenu/links', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetBusinessmenuLinksMock()),
        )
      }),rest.get('*/businessmenu/categories', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetBusinessmenuCategoriesMock()),
        )
      }),rest.get('*/widget/my-widgets', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetWidgetMyWidgetsMock()),
        )
      }),rest.put('*/widget/my-widgets', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
        )
      }),
rest.get('*/widget/widgets', (req, res, ctx) => {
  const templateId = req.url.searchParams.get('template-id')

  return res(
    ctx.delay(250),
    ctx.status(200, 'Mocked status'),
    ctx.json(getGetWidgetWidgetsMock(templateId)),
  )
}),rest.get('*/globalmenu-links', (req, res, ctx) => {
        return res(
          ctx.delay(250),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetGlobalmenuLinksMock()),
        )
      }),]
